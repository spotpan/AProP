import torch
#from hitsgnn import HITSGNN
#from hitsgnn_rev2 import HITSGNN

#from hitsgnn_rev2_chameleon import HITSGNN_ADAPTIVE

#from hitsgnn_chameleon import HITSGNN_ADAPTIVE

from hits_prgnn_chameleon import HITSGNN_ADAPTIVE


from utils import *
import argparse
import numpy as np
from metattack import MetaApprox, Metattack
import torch.nn.functional as F
import torch.optim as optim
import seaborn as sns
from matplotlib import pyplot as plt
import pandas as pd

parser = argparse.ArgumentParser()
parser.add_argument('--seed', type=int, default=15, help='Random seed.')
parser.add_argument('--epochs', type=int, default=200,
                    help='Number of epochs to train.')
parser.add_argument('--lr', type=float, default=0.01,
                    help='Initial learning rate.')
parser.add_argument('--hidden', type=int, default=16,
                    help='Number of hidden units.')
parser.add_argument('--dataset', type=str, default='citeseer',
                    choices=['cora', 'cora_ml', 'citeseer', 'polblogs'], help='dataset')
parser.add_argument('--ptb_rate', type=float, default=0.05,  help='pertubation rate')
parser.add_argument('--model', type=str, default='Meta-Self', choices=['A-Meta-Self', 'Meta-Self'], help='model variant')

args = parser.parse_args()
cuda = torch.cuda.is_available()
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

np.random.seed(args.seed)
torch.manual_seed(args.seed)
if device != 'cpu':
    torch.cuda.manual_seed(args.seed)

# === loading dataset
adj, features, labels = load_data(dataset=args.dataset)
nclass = max(labels) + 1

val_size = 0.1
test_size = 0.8
train_size = 1 - test_size - val_size

idx = np.arange(adj.shape[0])
idx_train, idx_val, idx_test = get_train_val_test(idx, train_size, val_size, test_size, stratify=labels)
idx_unlabeled = np.union1d(idx_val, idx_test)
perturbations = int(args.ptb_rate * (adj.sum()//2))

adj, features, labels = preprocess(adj, features, labels, preprocess_adj=False)

# set up attack model
if 'Self' in args.model:
    lambda_ = 0
if 'Train' in args.model:
    lambda_ = 1
if 'Both' in args.model:
    lambda_ = 0.5

if 'A' in args.model:
    model = MetaApprox(nfeat=features.shape[1], hidden_sizes=[args.hidden],
                       nnodes=adj.shape[0], nclass=nclass, dropout=0.5,
                       train_iters=100, attack_features=False, lambda_=lambda_, device=device)

else:
    model = Metattack(nfeat=features.shape[1], hidden_sizes=[args.hidden],
                       nnodes=adj.shape[0], nclass=nclass, dropout=0.5,
                       train_iters=100, attack_features=False, lambda_=lambda_, device=device)

if device != 'cpu':
    adj = adj.to(device)
    features = features.to(device)
    labels = labels.to(device)
    model = model.to(device)


def test(adj):
    ''' test on HITSGNN '''

    adj = normalize_adj_tensor(adj)
    hitsgnn = HITSGNN_ADAPTIVE(nfeat=features.shape[1],
              nhid=args.hidden,
              nclass=labels.max().item() + 1,
              dropout=0.5)

    if device != 'cpu':
        hitsgnn = hitsgnn.to(device)

    optimizer = optim.Adam(hitsgnn.parameters(),
                           lr=args.lr, weight_decay=5e-4)

    hitsgnn.train()

    for epoch in range(args.epochs):
        optimizer.zero_grad()
        output = hitsgnn(features, adj)
        loss_train = F.nll_loss(output[idx_train], labels[idx_train])
        acc_train = accuracy(output[idx_train], labels[idx_train])
        loss_train.backward()
        optimizer.step()

    hitsgnn.eval()
    output = hitsgnn(features, adj)

    loss_test = F.nll_loss(output[idx_test], labels[idx_test])
    acc_test = accuracy(output[idx_test], labels[idx_test])
    # print("Test set results:",
    #       "loss= {:.4f}".format(loss_test.item()),
    #       "accuracy= {:.4f}".format(acc_test.item()))

    return acc_test.item()


def main():
 
    modified_adj = model(features, adj, labels, idx_train,
                         idx_unlabeled, perturbations, ll_constraint=False)
    modified_adj = modified_adj.detach()


    tensor = modified_adj - adj

    nonzero_indices = torch.nonzero(tensor)

    nonzero_tuples = [(index[0].item(), index[1].item()) for index in nonzero_indices]
    
    print("nonzero_tuples", len(nonzero_tuples))

    print(nonzero_tuples)


    idx_test1=[0, 1, 4, 5, 7, 10, 11, 12, 15, 16, 18, 19, 20, 21, 23, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 42, 43, 46, 47, 51, 53, 59, 60, 61, 62, 65, 68, 69, 72, 73, 74, 75, 76, 79, 80, 81, 84, 85, 86, 91, 92, 94, 95, 96, 99, 100, 105, 108, 110, 111, 112, 114, 116, 117, 118, 119, 122, 123, 127, 130, 132, 134, 136, 137, 138, 140, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 163, 164, 165, 168, 169, 176, 178, 180, 181, 183, 184, 186, 189, 191, 196, 197, 199, 200, 202, 206, 208, 210, 213, 219, 221, 224, 225, 227, 228, 230, 232, 233, 234, 235, 236, 239, 242, 243, 244, 246, 248, 249, 250, 252, 254, 258, 259, 261, 262, 265, 267, 270, 271, 273, 278, 279, 280, 282, 285, 287, 288, 290, 291, 294, 304, 306, 313, 316, 320, 321, 324, 326, 329, 331, 333, 334, 338, 340, 342, 343, 344, 345, 346, 347, 350, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 379, 382, 384, 385, 388, 390, 391, 395, 398, 401, 403, 404, 408, 411, 413, 414, 415, 416, 417, 418, 420, 423, 424, 426, 428, 431, 433, 435, 436, 437, 438, 439, 440, 441, 443, 446, 448, 449, 450, 451, 452, 455, 456, 458, 459, 460, 461, 462, 463, 465, 466, 468, 469, 472, 474, 477, 480, 482, 483, 485, 487, 491, 494, 495, 496, 497, 499, 500, 502, 505, 508, 510, 513, 514, 517, 521, 522, 524, 526, 527, 528, 533, 534, 535, 539, 542, 543, 545, 546, 552, 553, 554, 560, 563, 564, 565, 566, 569, 571, 575, 576, 577, 579, 581, 585, 588, 589, 590, 592, 593, 594, 596, 597, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 612, 614, 616, 618, 619, 620, 621, 622, 625, 626, 627, 629, 630, 632, 633, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 674, 675, 676, 678, 683, 684, 685, 688, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 704, 708, 710, 712, 713, 715, 716, 717, 718, 719, 721, 724, 725, 726, 728, 730, 731, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 749, 750, 752, 755, 758, 759, 760, 762, 763, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 781, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 799, 802, 803, 804, 805, 807, 808, 810, 811, 815, 820, 821, 822, 825, 826, 827, 832, 834, 835, 836, 837, 838, 839, 840, 841, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 857, 858, 862, 863, 864, 866, 868, 870, 871, 872, 873, 874, 875, 878, 880, 882, 883, 885, 887, 888, 889, 891, 893, 896, 898, 899, 900, 901, 904, 905, 907, 908, 909, 910, 913, 914, 916, 917, 918, 921, 922, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 940, 944, 947, 950, 952, 955, 956, 957, 960, 963, 967, 968, 974, 975, 976, 979, 980, 983, 985, 986, 987, 988, 989, 990, 991, 993, 994, 998, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1023, 1024, 1025, 1027, 1028, 1029, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057, 1058, 1060, 1061, 1068, 1070, 1071, 1072, 1073, 1077, 1078, 1079, 1080, 1082, 1084, 1085, 1087, 1088, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1103, 1104, 1105, 1106, 1108, 1109, 1112, 1114, 1115, 1116, 1117, 1120, 1122, 1123, 1124, 1126, 1127, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1141, 1142, 1143, 1145, 1147, 1149, 1150, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1172, 1175, 1176, 1178, 1181, 1182, 1184, 1185, 1186, 1188, 1191, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1205, 1208, 1209, 1210, 1211, 1212, 1214, 1216, 1217, 1218, 1220]

    idx_test2=[0, 1, 3, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 30, 31, 32, 34, 36, 37, 38, 39, 42, 43, 46, 47, 48, 49, 56, 57, 59, 60, 61, 62, 63, 65, 66, 68, 70, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 118, 121, 122, 123, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 140, 142, 143, 144, 145, 146, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 189, 191, 193, 197, 198, 200, 202, 203, 205, 206, 207, 208, 212, 213, 215, 217, 219, 221, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 277, 278, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 303, 304, 306, 313, 314, 316, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 338, 340, 341, 342, 343, 344, 345, 349, 350, 351, 352, 353, 354, 355, 356, 359, 361, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 401, 404, 405, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 423, 425, 426, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 446, 448, 449, 450, 451, 452, 454, 456, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 482, 485, 486, 487, 488, 489, 494, 495, 496, 497, 499, 500, 502, 505, 507, 508, 511, 512, 513, 514, 517, 518, 522, 524, 526, 527, 528, 530, 531, 532, 534, 535, 538, 539, 540, 541, 542, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 556, 560, 561, 563, 564, 565, 566, 567, 568, 569, 571, 573, 574, 575, 576, 577, 579, 580, 581, 584, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 605, 606, 607, 609, 610, 612, 614, 616, 617, 621, 622, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 667, 668, 669, 670, 672, 673, 674, 675, 676, 678, 684, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 703, 704, 708, 709, 710, 712, 713, 715, 716, 717, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 748, 749, 750, 752, 753, 755, 758, 760, 762, 763, 764, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 779, 783, 784, 786, 788, 789, 791, 792, 793, 794, 799, 800, 801, 803, 804, 805, 807, 808, 809, 810, 815, 816, 818, 820, 825, 826, 827, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 853, 854, 855, 856, 858, 861, 862, 863, 864, 866, 870, 872, 873, 874, 875, 877, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 912, 913, 914, 916, 918, 921, 922, 923, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 946, 950, 951, 952, 953, 956, 957, 958, 960, 963, 967, 968, 969, 973, 974, 975, 976, 977, 978, 979, 980, 983, 985, 986, 987, 988, 989, 990, 991, 993, 994, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1020, 1023, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1052, 1053, 1057, 1058, 1060, 1061, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1078, 1080, 1082, 1083, 1085, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1119, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1153, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1171, 1172, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1184, 1185, 1188, 1189, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221]

    idx_test3=[0, 1, 4, 5, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 45, 46, 47, 50, 51, 53, 59, 60, 61, 62, 65, 68, 69, 72, 73, 74, 75, 76, 79, 80, 81, 82, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 99, 100, 102, 105, 106, 108, 110, 111, 112, 114, 116, 117, 118, 119, 122, 123, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 144, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 163, 164, 165, 168, 169, 172, 173, 176, 178, 179, 180, 181, 183, 184, 186, 188, 189, 191, 195, 196, 197, 199, 200, 202, 206, 207, 208, 209, 210, 213, 217, 219, 221, 224, 225, 227, 228, 230, 232, 233, 234, 235, 236, 237, 239, 242, 243, 244, 245, 246, 248, 249, 250, 252, 254, 257, 258, 259, 260, 261, 262, 265, 267, 270, 271, 273, 277, 278, 279, 280, 282, 285, 287, 288, 290, 291, 295, 298, 304, 306, 309, 313, 315, 316, 317, 318, 320, 321, 322, 324, 326, 327, 329, 331, 332, 333, 334, 338, 340, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 374, 375, 376, 379, 381, 382, 384, 385, 388, 390, 391, 395, 397, 398, 401, 403, 404, 408, 409, 411, 413, 414, 415, 417, 418, 420, 423, 424, 426, 428, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 446, 448, 449, 450, 451, 452, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 472, 474, 477, 480, 482, 483, 485, 487, 491, 494, 495, 496, 497, 499, 500, 502, 505, 508, 510, 512, 513, 514, 517, 521, 522, 524, 526, 527, 528, 531, 533, 534, 535, 536, 539, 540, 542, 543, 545, 546, 549, 552, 553, 554, 563, 564, 565, 566, 567, 569, 571, 572, 575, 576, 577, 579, 581, 585, 588, 589, 590, 592, 593, 594, 596, 597, 599, 601, 602, 603, 604, 605, 606, 607, 609, 610, 612, 614, 616, 618, 619, 620, 621, 622, 625, 626, 627, 629, 630, 632, 633, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 668, 669, 670, 672, 674, 675, 676, 678, 683, 684, 685, 688, 689, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 704, 708, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 730, 731, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 748, 749, 750, 752, 755, 758, 759, 760, 762, 763, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 780, 781, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 799, 800, 802, 803, 804, 805, 807, 808, 810, 811, 815, 820, 821, 822, 825, 826, 827, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 857, 858, 862, 863, 864, 866, 868, 870, 871, 872, 873, 874, 875, 878, 880, 882, 883, 885, 886, 887, 888, 889, 891, 893, 896, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 913, 914, 916, 917, 918, 921, 922, 925, 926, 929, 930, 931, 932, 933, 934, 935, 937, 938, 940, 941, 944, 947, 949, 950, 952, 953, 955, 956, 957, 960, 963, 967, 968, 971, 974, 975, 976, 978, 979, 980, 983, 985, 986, 987, 988, 989, 990, 991, 993, 994, 998, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1023, 1024, 1025, 1027, 1028, 1029, 1032, 1033, 1035, 1036, 1038, 1039, 1042, 1043, 1045, 1048, 1049, 1050, 1051, 1052, 1053, 1056, 1057, 1058, 1060, 1061, 1068, 1070, 1071, 1072, 1073, 1077, 1078, 1079, 1080, 1082, 1084, 1085, 1087, 1088, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1103, 1104, 1105, 1106, 1108, 1109, 1111, 1112, 1114, 1115, 1116, 1117, 1120, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1142, 1143, 1145, 1147, 1149, 1150, 1153, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1172, 1175, 1176, 1178, 1181, 1182, 1184, 1185, 1186, 1188, 1191, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1214, 1216, 1217, 1218, 1220]

    idx_test4=[0, 1, 3, 5, 6, 7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 30, 31, 32, 34, 36, 37, 38, 39, 42, 43, 46, 47, 48, 49, 53, 56, 57, 59, 60, 61, 63, 65, 66, 68, 70, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 104, 108, 109, 111, 112, 113, 114, 116, 117, 118, 121, 122, 123, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 140, 142, 143, 144, 145, 146, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 168, 169, 170, 175, 176, 177, 178, 179, 180, 181, 183, 184, 189, 191, 193, 197, 198, 200, 202, 203, 205, 206, 207, 208, 209, 212, 213, 215, 217, 219, 221, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 277, 278, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 295, 296, 297, 298, 303, 304, 306, 313, 314, 316, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 338, 340, 341, 342, 343, 344, 345, 349, 350, 351, 352, 353, 354, 355, 356, 359, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 379, 381, 382, 384, 385, 386, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 401, 404, 405, 407, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 422, 423, 425, 426, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 443, 446, 448, 449, 450, 451, 452, 454, 455, 456, 459, 460, 461, 463, 464, 465, 466, 467, 468, 474, 475, 476, 477, 479, 480, 482, 485, 487, 488, 489, 494, 495, 496, 497, 499, 500, 502, 505, 507, 508, 511, 512, 513, 514, 517, 518, 521, 522, 524, 526, 527, 528, 530, 531, 532, 534, 535, 536, 538, 539, 540, 542, 544, 545, 546, 549, 550, 551, 552, 553, 554, 556, 560, 561, 563, 564, 565, 566, 567, 569, 571, 573, 574, 575, 576, 577, 579, 580, 581, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 605, 606, 607, 609, 610, 612, 614, 616, 621, 625, 626, 627, 628, 629, 630, 631, 633, 635, 636, 637, 638, 642, 643, 644, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 668, 669, 670, 672, 673, 675, 676, 678, 684, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 704, 708, 710, 712, 713, 715, 716, 717, 719, 721, 724, 725, 726, 727, 728, 730, 731, 732, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 748, 749, 750, 752, 753, 755, 758, 760, 763, 764, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 779, 783, 784, 786, 788, 789, 791, 792, 793, 794, 799, 800, 801, 803, 804, 805, 807, 808, 809, 810, 815, 816, 818, 820, 825, 826, 827, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 853, 854, 855, 856, 858, 862, 863, 864, 866, 870, 872, 873, 874, 875, 877, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 912, 913, 914, 916, 918, 921, 922, 923, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 946, 950, 951, 952, 953, 956, 957, 958, 960, 963, 967, 968, 969, 973, 974, 975, 976, 977, 978, 979, 980, 983, 985, 986, 987, 988, 989, 990, 991, 993, 994, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1020, 1023, 1025, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1051, 1052, 1053, 1057, 1058, 1060, 1061, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1077, 1080, 1082, 1083, 1085, 1087, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1119, 1121, 1122, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1153, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1171, 1172, 1174, 1175, 1176, 1178, 1179, 1181, 1184, 1185, 1188, 1189, 1194, 1195, 1196, 1197, 1198, 1199, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1220]

    idx_test5=[4, 10, 11, 12, 18, 20, 21, 27, 31, 35, 36, 37, 42, 47, 51, 53, 59, 61, 68, 72, 75, 76, 80, 86, 94, 95, 96, 99, 100, 111, 114, 116, 118, 119, 122, 127, 130, 132, 136, 137, 138, 140, 146, 151, 153, 155, 156, 157, 158, 162, 164, 165, 168, 169, 176, 178, 180, 181, 183, 184, 186, 188, 189, 191, 196, 202, 206, 208, 213, 221, 224, 227, 232, 234, 235, 236, 242, 244, 249, 252, 254, 259, 261, 262, 265, 267, 270, 271, 273, 278, 280, 282, 287, 288, 290, 291, 298, 304, 306, 313, 316, 320, 326, 338, 340, 343, 345, 346, 347, 350, 353, 356, 359, 360, 361, 362, 363, 364, 365, 368, 371, 373, 375, 376, 379, 382, 384, 385, 388, 395, 401, 403, 408, 411, 417, 423, 426, 428, 435, 436, 438, 440, 441, 446, 448, 449, 450, 452, 456, 458, 459, 461, 462, 463, 468, 469, 472, 474, 477, 483, 485, 487, 494, 495, 496, 497, 499, 505, 514, 524, 533, 534, 539, 542, 546, 552, 554, 563, 564, 565, 571, 575, 576, 579, 581, 588, 590, 593, 596, 597, 599, 603, 606, 618, 621, 622, 626, 629, 630, 633, 636, 637, 638, 642, 646, 649, 650, 651, 653, 654, 656, 657, 658, 661, 662, 670, 672, 676, 678, 683, 688, 691, 693, 696, 698, 708, 710, 715, 717, 718, 728, 731, 736, 738, 739, 741, 742, 744, 750, 755, 760, 767, 768, 771, 774, 775, 776, 777, 780, 781, 783, 784, 788, 790, 791, 793, 799, 804, 805, 807, 808, 815, 825, 826, 832, 834, 835, 837, 838, 839, 841, 847, 849, 850, 851, 854, 858, 863, 868, 873, 874, 882, 883, 885, 886, 887, 889, 891, 896, 907, 908, 913, 914, 917, 921, 926, 930, 931, 932, 934, 938, 940, 949, 950, 956, 957, 967, 974, 975, 976, 980, 983, 985, 987, 988, 994, 1004, 1005, 1006, 1009, 1010, 1013, 1025, 1027, 1028, 1029, 1032, 1035, 1037, 1043, 1048, 1053, 1058, 1060, 1061, 1070, 1072, 1073, 1078, 1082, 1085, 1093, 1094, 1095, 1097, 1099, 1103, 1104, 1106, 1114, 1115, 1117, 1123, 1124, 1127, 1132, 1134, 1141, 1142, 1143, 1144, 1149, 1159, 1161, 1163, 1164, 1165, 1167, 1175, 1176, 1181, 1184, 1185, 1192, 1196, 1198, 1199, 1208, 1211, 1212, 1214, 1220]

    idx_test6=[0, 1, 5, 6, 7, 10, 11, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 31, 32, 36, 37, 38, 39, 42, 47, 48, 49, 56, 59, 60, 61, 63, 65, 66, 68, 73, 75, 76, 81, 82, 84, 85, 86, 92, 94, 96, 98, 99, 100, 101, 102, 104, 109, 111, 112, 113, 114, 116, 117, 118, 121, 122, 123, 127, 128, 130, 131, 132, 133, 134, 136, 137, 138, 140, 143, 145, 146, 151, 152, 153, 154, 155, 156, 162, 164, 165, 166, 168, 169, 170, 175, 176, 177, 178, 180, 181, 183, 184, 189, 191, 193, 197, 200, 202, 203, 205, 206, 208, 212, 215, 217, 219, 221, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 245, 248, 249, 252, 253, 254, 257, 258, 259, 260, 261, 262, 265, 266, 267, 270, 271, 272, 273, 278, 280, 281, 282, 284, 288, 291, 292, 295, 297, 298, 303, 304, 313, 314, 316, 317, 320, 321, 324, 325, 326, 327, 328, 329, 331, 334, 335, 338, 340, 342, 343, 344, 345, 351, 352, 353, 354, 355, 356, 359, 361, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 379, 381, 382, 384, 385, 388, 389, 391, 394, 398, 401, 404, 405, 411, 412, 413, 415, 417, 418, 419, 420, 426, 431, 435, 436, 437, 438, 439, 440, 443, 448, 449, 451, 452, 454, 456, 459, 460, 461, 463, 464, 468, 474, 475, 477, 479, 480, 482, 485, 487, 488, 489, 494, 495, 496, 497, 499, 500, 502, 505, 507, 508, 511, 512, 513, 514, 517, 518, 524, 530, 535, 539, 540, 542, 545, 546, 551, 552, 553, 554, 556, 560, 561, 563, 564, 565, 569, 571, 573, 575, 576, 579, 580, 581, 588, 590, 592, 595, 596, 597, 599, 601, 602, 605, 606, 607, 609, 610, 614, 616, 621, 626, 627, 629, 633, 635, 636, 637, 638, 643, 644, 646, 649, 650, 654, 655, 656, 657, 658, 661, 662, 664, 668, 669, 672, 673, 676, 691, 692, 693, 695, 696, 698, 699, 700, 704, 708, 710, 713, 717, 719, 725, 726, 728, 729, 730, 731, 732, 734, 736, 739, 740, 741, 742, 743, 744, 748, 749, 750, 753, 755, 758, 766, 769, 771, 772, 773, 775, 777, 779, 783, 784, 788, 792, 793, 794, 799, 800, 801, 804, 805, 807, 808, 809, 810, 820, 825, 826, 832, 834, 835, 836, 837, 838, 839, 840, 841, 845, 847, 849, 855, 858, 863, 864, 870, 873, 874, 883, 887, 888, 889, 890, 892, 894, 899, 900, 904, 905, 906, 907, 909, 912, 914, 918, 921, 923, 929, 930, 931, 932, 934, 936, 940, 946, 950, 952, 956, 957, 958, 960, 963, 967, 971, 974, 975, 976, 977, 979, 980, 983, 985, 987, 988, 991, 993, 994, 998, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1013, 1015, 1016, 1017, 1023, 1025, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1040, 1041, 1042, 1043, 1045, 1048, 1049, 1051, 1052, 1061, 1068, 1070, 1072, 1075, 1077, 1082, 1083, 1087, 1092, 1093, 1094, 1095, 1099, 1101, 1105, 1106, 1108, 1109, 1114, 1117, 1119, 1124, 1125, 1126, 1127, 1129, 1132, 1134, 1136, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1153, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1171, 1175, 1176, 1178, 1179, 1181, 1184, 1185, 1188, 1194, 1195, 1196, 1197, 1198, 1199, 1206, 1208, 1209, 1211, 1212, 1214]


    idx_test7=[ ele for ele in idx_test if ele not in idx_test1 and ele not in idx_test2 
               and ele not in idx_test3 and ele not in idx_test4 
               and ele not in idx_test5 and ele not in idx_test6 ]
    #idx_test7=[ ele for ele in idx_val if ele in idx_test7]

    # Extract unique elements from tuples
    unique_elements = set([elem for tup in nonzero_tuples for elem in tup])

    print("unique_elements", len(unique_elements))

    # Count occurrences of unique elements in test lists
    count_list1 = sum(1 for elem in unique_elements if elem in idx_test1)
    count_list2 = sum(1 for elem in unique_elements if elem in idx_test2)
    count_list3 = sum(1 for elem in unique_elements if elem in idx_test3)
    count_list4 = sum(1 for elem in unique_elements if elem in idx_test4)
    count_list5 = sum(1 for elem in unique_elements if elem in idx_test5)
    count_list6 = sum(1 for elem in unique_elements if elem in idx_test6)
    count_list7 = sum(1 for elem in unique_elements if elem in idx_test7)

    print("Unique Elements:", unique_elements)
    print("Count in list1:", count_list1)
    print("Count in list2:", count_list2)
    print("Count in list3:", count_list3)
    print("Count in list4:", count_list4)
    print("Count in list5:", count_list5)
    print("Count in list6:", count_list6)
    print("Count in list7:", count_list7)

    bar=[count_list1, count_list2, count_list3, count_list4, count_list5, count_list6, count_list7]

    percentage = [ele/sum(bar) * 100 for ele in bar]
        
    print("percentage", percentage)

    # Plot the counts as a bar chart
    plt.bar([1, 2, 3, 4 ,5, 6, 7], 
            [count_list1, count_list2, count_list3, count_list4, 
             count_list5, count_list6, count_list7], 
            tick_label=['n1', 'n2', 'n3', 'n4', 'n5', 'n6', 'n<not1&2hop>'])
    plt.xlabel('Test Distribution')
    plt.ylabel('Counts')
    plt.title('Counts of Trapped Edges')
    plt.show()

    #runs = 10
    #clean_acc = []
    #attacked_acc = []
    #print('=== testing HITSGNN on original(clean) graph ===')
    #for i in range(runs):
    #    clean_acc.append(test(adj))

    #print("clean_acc:",clean_acc)

    #print('=== testing HITSGNN on attacked graph ===')
    #for i in range(runs):
    #    attacked_acc.append(test(modified_adj))


    #data=pd.DataFrame({"Acc. Clean":clean_acc,"Acc. Perturbed":attacked_acc})

    #plt.figure(figsize=(6,6))
    #sns.boxplot(data=data)#, re_trainings*[accuracy_logistic]])

    #plt.title("Accuracy before/after perturbing {}% edges using model {}".format(args.ptb_rate*100, args.model))
    #plt.savefig("results_on_{}.png".format(args.dataset), dpi=600)
    #plt.show()


if __name__ == '__main__':
    main()

